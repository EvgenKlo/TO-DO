{"ast":null,"code":"var _jsxFileName = \"E:\\\\to-do\\\\src\\\\components\\\\project\\\\ProjectColumn.tsx\",\n  _s = $RefreshSig$();\nimport { Grid } from '@mui/material';\nimport TaskItem from './TaskItem';\nimport { useDrop } from 'react-dnd';\nimport { Actions } from '../../types/types';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectColumn = ({\n  project,\n  columnName\n}) => {\n  _s();\n  var _project$tasks;\n  const dispatch = useDispatch();\n  const [{\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: 'BOX',\n    drop: item => {\n      dispatch({\n        type: Actions.EditTask,\n        payload: {\n          projectId: project.id,\n          task: {\n            ...item,\n            status: columnName\n          }\n        }\n      });\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver()\n    })\n  }));\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    sx: {\n      width: '32%',\n      textAlign: 'center',\n      border: '1px solid black',\n      borderRadius: 2\n    },\n    ref: drop,\n    role: 'Dustbin',\n    style: {\n      backgroundColor: isOver ? 'gray' : 'white'\n    },\n    children: [columnName, (_project$tasks = project.tasks) === null || _project$tasks === void 0 ? void 0 : _project$tasks.filter(item => item.status === columnName).map(item => /*#__PURE__*/_jsxDEV(TaskItem, {\n      item: item\n    }, `${project.id}.${item.number}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectColumn, \"xH1SZyWZnxweqKlQZrVh4vFd8zA=\", false, function () {\n  return [useDispatch, useDrop];\n});\n_c = ProjectColumn;\nexport default ProjectColumn;\nvar _c;\n$RefreshReg$(_c, \"ProjectColumn\");","map":{"version":3,"names":["Grid","TaskItem","useDrop","Actions","useDispatch","jsxDEV","_jsxDEV","ProjectColumn","project","columnName","_s","_project$tasks","dispatch","isOver","drop","accept","item","type","EditTask","payload","projectId","id","task","status","collect","monitor","sx","width","textAlign","border","borderRadius","ref","role","style","backgroundColor","children","tasks","filter","map","number","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/to-do/src/components/project/ProjectColumn.tsx"],"sourcesContent":["import { Grid } from '@mui/material';\r\nimport TaskItem from './TaskItem';\r\nimport { useDrop } from 'react-dnd';\r\nimport { Actions, Project, Status, Task } from '../../types/types';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst ProjectColumn: React.FC<{ project: Project; columnName: Status }> = ({\r\n  project,\r\n  columnName,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [{ isOver }, drop] = useDrop(() => ({\r\n    accept: 'BOX',\r\n    drop: (item: Task) => {\r\n      dispatch({\r\n        type: Actions.EditTask,\r\n        payload: {\r\n          projectId: project.id,\r\n          task: { ...item, status: columnName },\r\n        },\r\n      });\r\n    },\r\n\r\n    collect: (monitor) => ({\r\n      isOver: monitor.isOver(),\r\n    }),\r\n  }));\r\n\r\n  return (\r\n    <Grid\r\n      item\r\n      sx={{\r\n        width: '32%',\r\n        textAlign: 'center',\r\n        border: '1px solid black',\r\n        borderRadius: 2,\r\n      }}\r\n      ref={drop}\r\n      role={'Dustbin'}\r\n      style={{ backgroundColor: isOver ? 'gray' : 'white' }}\r\n    >\r\n      {columnName}\r\n      {project.tasks\r\n        ?.filter((item) => item.status === columnName)\r\n        .map((item) => (\r\n          <TaskItem\r\n            item={item}\r\n            key={`${project.id}.${item.number}`}\r\n          />\r\n        ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ProjectColumn;\r\n"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,eAAe;AACpC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,OAAO,QAA+B,mBAAmB;AAClE,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,aAAiE,GAAGA,CAAC;EACzEC,OAAO;EACPC;AACF,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,cAAA;EACJ,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAM,CAAC;IAAES;EAAO,CAAC,EAAEC,IAAI,CAAC,GAAGZ,OAAO,CAAC,OAAO;IACxCa,MAAM,EAAE,KAAK;IACbD,IAAI,EAAGE,IAAU,IAAK;MACpBJ,QAAQ,CAAC;QACPK,IAAI,EAAEd,OAAO,CAACe,QAAQ;QACtBC,OAAO,EAAE;UACPC,SAAS,EAAEZ,OAAO,CAACa,EAAE;UACrBC,IAAI,EAAE;YAAE,GAAGN,IAAI;YAAEO,MAAM,EAAEd;UAAW;QACtC;MACF,CAAC,CAAC;IACJ,CAAC;IAEDe,OAAO,EAAGC,OAAO,KAAM;MACrBZ,MAAM,EAAEY,OAAO,CAACZ,MAAM,CAAC;IACzB,CAAC;EACH,CAAC,CAAC,CAAC;EAEH,oBACEP,OAAA,CAACN,IAAI;IACHgB,IAAI;IACJU,EAAE,EAAE;MACFC,KAAK,EAAE,KAAK;MACZC,SAAS,EAAE,QAAQ;MACnBC,MAAM,EAAE,iBAAiB;MACzBC,YAAY,EAAE;IAChB,CAAE;IACFC,GAAG,EAAEjB,IAAK;IACVkB,IAAI,EAAE,SAAU;IAChBC,KAAK,EAAE;MAAEC,eAAe,EAAErB,MAAM,GAAG,MAAM,GAAG;IAAQ,CAAE;IAAAsB,QAAA,GAErD1B,UAAU,GAAAE,cAAA,GACVH,OAAO,CAAC4B,KAAK,cAAAzB,cAAA,uBAAbA,cAAA,CACG0B,MAAM,CAAErB,IAAI,IAAKA,IAAI,CAACO,MAAM,KAAKd,UAAU,CAAC,CAC7C6B,GAAG,CAAEtB,IAAI,iBACRV,OAAA,CAACL,QAAQ;MACPe,IAAI,EAAEA;IAAK,GACL,GAAER,OAAO,CAACa,EAAG,IAAGL,IAAI,CAACuB,MAAO,EAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEX,CAAC;AAACjC,EAAA,CA/CIH,aAAiE;EAAA,QAIpDH,WAAW,EAEDF,OAAO;AAAA;AAAA0C,EAAA,GAN9BrC,aAAiE;AAiDvE,eAAeA,aAAa;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}