{"ast":null,"code":"var _jsxFileName = \"E:\\\\to-do\\\\src\\\\components\\\\project\\\\TaskItem.tsx\",\n  _s = $RefreshSig$();\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { CardActionArea } from '@mui/material';\nimport { useDrag } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskItem = ({\n  item\n}) => {\n  _s();\n  const [{\n    isDragging\n  }, drag, dragPreview] = useDrag(() => ({\n    // \"type\" is required. It is used by the \"accept\" specification of drop targets.\n    type: 'BOX',\n    // The collect function utilizes a \"monitor\" instance (see the Overview for what this is)\n    // to pull important pieces of state from the DnD system.\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }));\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      margin: 1,\n      backgroundColor: item.priority\n    },\n    ref: drag,\n    children: /*#__PURE__*/_jsxDEV(CardActionArea, {\n      draggable: true,\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h5\",\n          component: \"div\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: item.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskItem, \"F3VZb1M3Ds+MGq6ZtF6l2g/UrME=\", false, function () {\n  return [useDrag];\n});\n_c = TaskItem;\nexport default TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["Card","CardContent","Typography","CardActionArea","useDrag","jsxDEV","_jsxDEV","TaskItem","item","_s","isDragging","drag","dragPreview","type","collect","monitor","sx","margin","backgroundColor","priority","ref","children","draggable","gutterBottom","variant","component","name","fileName","_jsxFileName","lineNumber","columnNumber","color","description","_c","$RefreshReg$"],"sources":["E:/to-do/src/components/project/TaskItem.tsx"],"sourcesContent":["import { Task } from '../../types/types';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport { CardActionArea } from '@mui/material';\r\n\r\nimport { useDrag } from 'react-dnd';\r\n\r\nconst TaskItem: React.FC<{ item: Task }> = ({ item }) => {\r\n  const [{ isDragging }, drag, dragPreview] = useDrag(() => ({\r\n    // \"type\" is required. It is used by the \"accept\" specification of drop targets.\r\n    type: 'BOX',\r\n    // The collect function utilizes a \"monitor\" instance (see the Overview for what this is)\r\n    // to pull important pieces of state from the DnD system.\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  }));\r\n\r\n  return (\r\n    <Card\r\n      sx={{ margin: 1, backgroundColor: item.priority }}\r\n      ref={drag}\r\n    >\r\n      <CardActionArea draggable={true}>\r\n        <CardContent>\r\n          <Typography\r\n            gutterBottom\r\n            variant=\"h5\"\r\n            component=\"div\"\r\n          >\r\n            {item.name}\r\n          </Typography>\r\n          <Typography\r\n            variant=\"body2\"\r\n            color=\"text.secondary\"\r\n          >\r\n            {item.description}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TaskItem;\r\n"],"mappings":";;AACA,OAAOA,IAAI,MAAM,oBAAoB;AACrC,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,cAAc,QAAQ,eAAe;AAE9C,SAASC,OAAO,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,QAAkC,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACvD,MAAM,CAAC;IAAEC;EAAW,CAAC,EAAEC,IAAI,EAAEC,WAAW,CAAC,GAAGR,OAAO,CAAC,OAAO;IACzD;IACAS,IAAI,EAAE,KAAK;IACX;IACA;IACAC,OAAO,EAAGC,OAAO,KAAM;MACrBL,UAAU,EAAEK,OAAO,CAACL,UAAU,CAAC;IACjC,CAAC;EACH,CAAC,CAAC,CAAC;EAEH,oBACEJ,OAAA,CAACN,IAAI;IACHgB,EAAE,EAAE;MAAEC,MAAM,EAAE,CAAC;MAAEC,eAAe,EAAEV,IAAI,CAACW;IAAS,CAAE;IAClDC,GAAG,EAAET,IAAK;IAAAU,QAAA,eAEVf,OAAA,CAACH,cAAc;MAACmB,SAAS,EAAE,IAAK;MAAAD,QAAA,eAC9Bf,OAAA,CAACL,WAAW;QAAAoB,QAAA,gBACVf,OAAA,CAACJ,UAAU;UACTqB,YAAY;UACZC,OAAO,EAAC,IAAI;UACZC,SAAS,EAAC,KAAK;UAAAJ,QAAA,EAEdb,IAAI,CAACkB;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACbxB,OAAA,CAACJ,UAAU;UACTsB,OAAO,EAAC,OAAO;UACfO,KAAK,EAAC,gBAAgB;UAAAV,QAAA,EAErBb,IAAI,CAACwB;QAAW;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEX,CAAC;AAACrB,EAAA,CAnCIF,QAAkC;EAAA,QACMH,OAAO;AAAA;AAAA6B,EAAA,GAD/C1B,QAAkC;AAqCxC,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}