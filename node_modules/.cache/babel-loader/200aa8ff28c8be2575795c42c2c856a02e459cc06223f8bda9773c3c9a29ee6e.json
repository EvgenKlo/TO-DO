{"ast":null,"code":"var _jsxFileName = \"E:\\\\to-do\\\\src\\\\pages\\\\project\\\\Project.tsx\",\n  _s = $RefreshSig$();\nimport { useParams } from 'react-router-dom';\nimport { useAppSelector } from '../../hooks/useAppSelector';\nimport { Button, Grid, Typography } from '@mui/material';\nimport AddTaskModal from '../../components/project/AddTaskModal';\nimport { useState } from 'react';\nimport TaskItem from '../../components/project/TaskItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Project = () => {\n  _s();\n  var _project$tasks, _project$tasks2, _project$tasks3, _project$tasks4;\n  const {\n    id\n  } = useParams();\n  const state = useAppSelector(state => state.projects);\n  const project = id && state.find(item => item.id === +id);\n  const [modalOpen, setModalOpen] = useState(false);\n  return !project ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Project not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: project.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => {\n        setModalOpen(true);\n      },\n      children: \"Create task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      sx: {\n        width: '100%'\n      },\n      gap: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sx: {\n          width: '100%',\n          textAlign: 'center',\n          border: '1px solid black',\n          borderRadius: 2\n        },\n        children: [\"Queue\", (_project$tasks = project.tasks) === null || _project$tasks === void 0 ? void 0 : _project$tasks.filter(item => item.status === 'queue').map(item => /*#__PURE__*/_jsxDEV(TaskItem, {\n          item: item\n        }, `${project.id}.${item.number}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sx: {\n          width: '100%',\n          textAlign: 'center',\n          border: '1px solid black',\n          borderRadius: 2\n        },\n        children: [\"Development\", (_project$tasks2 = project.tasks) === null || _project$tasks2 === void 0 ? void 0 : _project$tasks2.filter(item => item.status === 'development').map(item => /*#__PURE__*/_jsxDEV(TaskItem, {\n          item: item\n        }, `${project.id}.${item.number}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sx: {\n          width: '33%',\n          textAlign: 'center',\n          border: '1px solid black',\n          borderRadius: 2\n        },\n        children: [\"Done\", (_project$tasks3 = project.tasks) === null || _project$tasks3 === void 0 ? void 0 : _project$tasks3.filter(item => item.status === 'done').map(item => /*#__PURE__*/_jsxDEV(TaskItem, {\n          item: item\n        }, `${project.id}.${item.number}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTaskModal, {\n      modalOpen: modalOpen,\n      setModalOpen: setModalOpen,\n      taskId: (_project$tasks4 = project.tasks) !== null && _project$tasks4 !== void 0 && _project$tasks4.length ? project.tasks[project.tasks.length - 1].number + 1 : 1,\n      projectId: project.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Project, \"SBaXpWXvQZlEAKUC5uT7KDadyto=\", false, function () {\n  return [useParams, useAppSelector];\n});\n_c = Project;\nexport default Project;\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["useParams","useAppSelector","Button","Grid","Typography","AddTaskModal","useState","TaskItem","jsxDEV","_jsxDEV","Fragment","_Fragment","Project","_s","_project$tasks","_project$tasks2","_project$tasks3","_project$tasks4","id","state","projects","project","find","item","modalOpen","setModalOpen","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","name","onClick","container","sx","width","gap","textAlign","border","borderRadius","tasks","filter","status","map","number","taskId","length","projectId","_c","$RefreshReg$"],"sources":["E:/to-do/src/pages/project/Project.tsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\r\nimport { useAppSelector } from '../../hooks/useAppSelector';\r\nimport { Button, Grid, Typography } from '@mui/material';\r\nimport AddTaskModal from '../../components/project/AddTaskModal';\r\nimport { useState } from 'react';\r\nimport TaskItem from '../../components/project/TaskItem';\r\n\r\nconst Project = () => {\r\n  const { id } = useParams();\r\n\r\n  const state = useAppSelector((state) => state.projects);\r\n\r\n  const project = id && state.find((item) => item.id === +id);\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  return !project ? (\r\n    <div>Project not found</div>\r\n  ) : (\r\n    <>\r\n      <Typography variant=\"h4\">{project.name}</Typography>\r\n      <Button\r\n        onClick={() => {\r\n          setModalOpen(true);\r\n        }}\r\n      >\r\n        Create task\r\n      </Button>\r\n      <Grid\r\n        container\r\n        sx={{ width: '100%' }}\r\n        gap={2}\r\n      >\r\n        <Grid\r\n          item\r\n          sx={{\r\n            width: '100%',\r\n            textAlign: 'center',\r\n            border: '1px solid black',\r\n            borderRadius: 2,\r\n          }}\r\n        >\r\n          Queue\r\n          {project.tasks\r\n            ?.filter((item) => item.status === 'queue')\r\n            .map((item) => (\r\n              <TaskItem\r\n                item={item}\r\n                key={`${project.id}.${item.number}`}\r\n              />\r\n            ))}\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          sx={{ width: '100%', textAlign: 'center', border: '1px solid black', borderRadius: 2 }}\r\n        >\r\n          Development\r\n          {project.tasks\r\n            ?.filter((item) => item.status === 'development')\r\n            .map((item) => (\r\n              <TaskItem\r\n                item={item}\r\n                key={`${project.id}.${item.number}`}\r\n              />\r\n            ))}\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          sx={{ width: '33%', textAlign: 'center', border: '1px solid black', borderRadius: 2 }}\r\n        >\r\n          Done\r\n          {project.tasks\r\n            ?.filter((item) => item.status === 'done')\r\n            .map((item) => (\r\n              <TaskItem\r\n                item={item}\r\n                key={`${project.id}.${item.number}`}\r\n              />\r\n            ))}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <AddTaskModal\r\n        modalOpen={modalOpen}\r\n        setModalOpen={setModalOpen}\r\n        taskId={project.tasks?.length ? project.tasks[project.tasks.length - 1].number + 1 : 1}\r\n        projectId={project.id}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}